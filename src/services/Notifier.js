// import { log } from '../utils/logger.js';

// export class Notifier {
// 	constructor(bot) {
// 		this.bot = bot;
// 	}

// 	async sendText(chatId, text, extra = {}) {
// 		try {
// 			const id = Number(String(chatId).trim());
// 			if (!id || !text) return { ok: false, error: 'BAD_PARAMS' };
// 			const m = await this.bot.sendMessage(id, text, extra);
// 			return { ok: true, message_id: m?.message_id };
// 		} catch (e) {
// 			return { ok: false, error: e?.message || String(e) };
// 		}
// 	}

// 	async notifyAssignee(emp, task) {
// 		if (!emp?.tg_user_id) return;
// 		const chatId = Number(String(emp.tg_user_id).trim());
// 		if (!chatId) return;

// 		const kb = {
// 		reply_markup: {
// 			inline_keyboard: [
// 				[{ text: '‚ñ∂Ô∏è –í —Ä–∞–±–æ—Ç—É', callback_data: `task_status|${task.id}|–≤ —Ä–∞–±–æ—Ç–µ` }],
// 				[{ text: '‚õî –ë–ª–æ–∫',     callback_data: `task_status|${task.id}|–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞` }],
// 				[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ',   callback_data: `task_status|${task.id}|–≤—ã–ø–æ–ª–Ω–µ–Ω–∞` }]
// 			]
// 		}
// 		};

// 		const lines = [
// 			'üÜï *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞*',
// 			`ID: \`${task.id}\``,
// 			`*–ó–∞–¥–∞—á–∞:* ${task.title}`,
// 			`*–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.desc || '‚Äî'}`,
// 			`*–î–µ–¥–ª–∞–π–Ω:* ${task.deadline || '‚Äî'}`,
// 			`*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${task.priority || '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π'}`
// 		];

// 		try {
// 			await this.bot.sendMessage(chatId, lines.join('\n'), { parse_mode: 'Markdown', ...kb });
// 		} catch (e) {
// 			log.warn('[NOTIFY WARN]', e?.message || e);
// 		}
// 	}
// }

// src/services/Notifier.js
import { log } from '../utils/logger.js';

export class Notifier {
  constructor(bot) {
    this.bot = bot;
  }

  async sendText(chatId, text, extra = {}) {
    try {
      const id = Number(String(chatId).trim());
      if (!id || !text) return { ok: false, error: 'BAD_PARAMS' };
      const m = await this.bot.sendMessage(id, text, extra);
      return { ok: true, message_id: m?.message_id };
    } catch (e) {
      return { ok: false, error: e?.message || String(e) };
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
   */
  async notifyAssignee(emp, task) {
    const chatId = this._pickChatId(emp);
    if (!chatId) return;

    const kb = {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ñ∂Ô∏è –í —Ä–∞–±–æ—Ç—É', callback_data: `task_status|${task.id}|–≤ —Ä–∞–±–æ—Ç–µ` }],
          [{ text: '‚õî –ë–ª–æ–∫',     callback_data: `task_status|${task.id}|–≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è` }],
          [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ',   callback_data: `task_status|${task.id}|–∑–∞–≤–µ—Ä—à–µ–Ω–∞` }]
        ]
      }
    };

    const lines = [
      'üÜï *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞*',
      `ID: \`${task.id}\``,
      `*–ó–∞–¥–∞—á–∞:* ${task.title}`,
      `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.desc || '‚Äî'}`,
      `*–î–µ–¥–ª–∞–π–Ω:* ${task.deadline || '‚Äî'}`,
      `*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${task.priority || '–°—Ä–µ–¥–Ω–∏–π'}`
    ];

    try {
      await this.bot.sendMessage(chatId, lines.join('\n'), { parse_mode: 'Markdown', ...kb });
    } catch (e) {
      log.warn('[NOTIFY WARN]', e?.message || e);
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ü–ï–†–ï–ù–ê–ó–ù–ê–ß–ï–ù–ò–ò –∑–∞–¥–∞—á–∏ (–Ω–æ–≤–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é)
   * oldEmp ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–µ–∂–Ω–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
   */
  async notifyReassigned(newEmp, task, oldEmp = null) {
    const newChatId = this._pickChatId(newEmp);
    if (newChatId) {
      const kb = {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ñ∂Ô∏è –í —Ä–∞–±–æ—Ç—É', callback_data: `task_status|${task.id}|–≤ —Ä–∞–±–æ—Ç–µ` }],
            [{ text: '‚õî –ë–ª–æ–∫',     callback_data: `task_status|${task.id}|–≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è` }],
            [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ',   callback_data: `task_status|${task.id}|–∑–∞–≤–µ—Ä—à–µ–Ω–∞` }]
          ]
        }
      };
      const lines = [
        'üîÑ *–í–∞–º –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞*',
        `ID: \`${task.id}\``,
        `*–ó–∞–¥–∞—á–∞:* ${task.title || '‚Äî'}`,
        `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.desc || '‚Äî'}`,
        `*–î–µ–¥–ª–∞–π–Ω:* ${task.deadline || '‚Äî'}`,
        `*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${task.priority || '–°—Ä–µ–¥–Ω–∏–π'}`
      ];
      try {
        await this.bot.sendMessage(newChatId, lines.join('\n'), { parse_mode: 'Markdown', ...kb });
      } catch (e) {
        log.warn('[NOTIFY WARN]', e?.message || e);
      }
    }

    if (oldEmp) {
      const oldChatId = this._pickChatId(oldEmp);
      if (oldChatId) {
        const txt = [
          '‚ÑπÔ∏è –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É',
          `ID: ${task.id}`,
          `–ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title || '‚Äî'}`,
          `–ù–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${newEmp?.name || '‚Äî'}`
        ].join('\n');
        try {
          await this.bot.sendMessage(oldChatId, txt);
        } catch (e) {
          log.warn('[NOTIFY WARN]', e?.message || e);
        }
      }
    }
  }

  _pickChatId(emp) {
    return Number(String(emp?.tg_user_id || emp?.chat_id || '').trim()) || null;
  }
}
