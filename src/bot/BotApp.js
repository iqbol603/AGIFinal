// import fs from 'fs';
// import TelegramBot from 'node-telegram-bot-api';
// import { ENV } from '../config/env.js';
// import { log } from '../utils/logger.js';
// import { FileStorage } from '../services/FileStorage.js';
// import { OpenAIService } from '../services/OpenAIService.js';
// import { AssistantService } from '../services/AssistantService.js';
// import { EmployeesService } from '../services/EmployeesService.js';
// import { Notifier } from '../services/Notifier.js';
// import { ToolRouter } from '../services/ToolRouter.js';
// import { TelegramUI } from './TelegramUI.js';
// import { AccessControlService } from '../services/AccessControlService.js';
// import { ApiClient } from '../services/ApiClient.js';

// export class BotApp {
// 	constructor() {
// 		this.bot = new TelegramBot(ENV.TELEGRAM_TOKEN, { polling: true });

// 		const api = new ApiClient();
// 		this.files = new FileStorage();
// 		this.openai = new OpenAIService();
// 		this.assistant = new AssistantService({ bot: this.bot});
// 		this.employees = new EmployeesService(api);
// 		this.notifier = new Notifier(this.bot);
// 		this.tools = new ToolRouter({ api, employees: this.employees, notifier: this.notifier });
// 		this.acl = new AccessControlService({ employees: this.employees });
// 		this.uiState = new Map();
// 		this.pendingAssign = new Map();

// 		this.bindHandlers();
// 		log.info('BotApp initialized');
// 	}

// 	bindHandlers() {
// 		this.bot.onText(/^(\/start|\/menu)$/, async (msg) => {
// 			const auth = await this.acl.authorize(msg.from?.id);
// 			if (!auth.allowed) {
// 				console.log('not auth', msg.from?.id);
// 				return;
// 			}
// 			await this.bot.sendMessage(
// 				msg.chat.id,
// 				'üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è —Å–ø—Ä–æ—à—É –ò–ò-–∞–≥–µ–Ω—Ç–∞ –∏/–∏–ª–∏ –≤—ã–ø–æ–ª–Ω—é –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏.\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
// 				TelegramUI.mainMenuInline()
// 			);
// 		});

// 		this.bot.on('callback_query', async (q) => this.onCallbackQuery(q));
// 		this.bot.on('message', async (msg) => this.onMessage(msg));
// 	}

// 	async start() { }
// 	async stop() { }

// 	async onCallbackQuery(q) {
// 		const auth = await this.acl.authorize(q.from?.id);
// 		if (!auth.allowed) return;
// 	}

// 	async onMessage(msg) {
// 		console.log('[TELEGRAM][GET][MESSAGE]', msg);

// 		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ –≥–æ–ª–æ—Å –æ—Ç–∫–ª–æ–Ω—è–µ–º
// 		if (!msg.text && !msg.voice) return;
// 		if (msg.text && msg.text.startsWith('/')) return;

// 		// –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
// 		const auth = await this.acl.authorize(msg.from?.id);

// 		console.log('auth', auth, msg.from?.id);
// 		if (!auth.allowed) return;

// 		const chatId = msg.chat.id;
		
// 		if (msg.text && !msg.text.startsWith('/')) {
// 			await this.bot.sendMessage(chatId, '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...');
// 			const aiReply = await this.assistant.ask(msg.text, { chatId, employee: auth.employee });

// 			console.log('===============================================================');
// 			console.log('[TELEGRAM][REPLY]', aiReply);
// 			console.log('===============================================================');
// 			await this.bot.sendMessage(chatId, aiReply);

// 			try {
// 				const buf = await this.openai.speak(aiReply);
// 				const out = await this.files.saveBuffer(buf, 'ogg');
// 				await this.bot.sendVoice(chatId, { source: fs.createReadStream(out), filename: 'voice.ogg', contentType: 'audio/ogg' });
// 			} catch { }

// 			return;
// 		}

// 		if (msg.voice) {
// 			try {
// 				await this.bot.sendMessage(chatId, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å‚Ä¶');
// 				const localPath = await this.files.downloadTelegramFile(this.bot, msg.voice.file_id, 'ogg');
// 				const text = await this.openai.transcribe(localPath);
// 				await this.bot.sendMessage(chatId, `üìù –†–∞—Å–ø–æ–∑–Ω–∞–ª: ¬´${text}¬ª`);

// 				await this.bot.sendMessage(chatId, 'üîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑‚Ä¶');
// 				const aiReply = await this.assistant.ask(text, { chatId, employee: auth.employee });
// 				await this.bot.sendMessage(chatId, aiReply);

// 				try {
// 					const buf = await this.openai.speak(aiReply);
// 					const out = await this.files.saveBuffer(buf, 'ogg');
// 					// console.log("jjj", out, "pp", buf);
// 					// // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
// 					// await this.bot.sendVoice(chatId, {
// 					// 	source: fs.createReadStream(out),
// 					// 	filename: 'voice.ogg',
// 					// 	contentType: 'audio/ogg'
// 					// });
// 					const voicePath = out;
// 					// –í–∞–∂–Ω–æ: sendVoice —Ç—Ä–µ–±—É–µ—Ç OGG/Opus. –ï—Å–ª–∏ —É —Ç–µ–±—è mp3 ‚Äî —Å–º. –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –Ω–∏–∂–µ.

// 					await this.bot.sendVoice(
// 						chatId,
// 						fs.createReadStream(voicePath),       // <‚Äî Stream/Buffer/–ø—É—Ç—å
// 						// { caption: '–û—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º' },         // options
// 						{ filename: 'voice.ogg' }             // fileOptions
// 					);
// 				} catch { }
// 			} catch (e) {
// 				log.error('[VOICE ERROR]', e?.message || e);
// 				await this.bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
// 			}
// 		}
// 	}
// }

// src/bot/BotApp.js
import fs from 'fs';
import TelegramBot from 'node-telegram-bot-api';
import { ENV } from '../config/env.js';
import { log } from '../utils/logger.js';
import { FileStorage } from '../services/FileStorage.js';
import { OpenAIService } from '../services/OpenAIService.js';
import { AssistantService } from '../services/AssistantService.js';
import { EmployeesService } from '../services/EmployeesService.js';
import { Notifier } from '../services/Notifier.js';
import { ToolRouter } from '../services/ToolRouter.js';
import { TelegramUI } from './TelegramUI.js';
import { AccessControlService } from '../services/AccessControlService.js';
import { ApiClient } from '../services/ApiClient.js';
import { startDirectorHourlyReportScheduler } from '../services/ReportScheduler.js';

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫ –ë–î
function normalizeTaskStatus(s) {
  const x = String(s || '').trim().toLowerCase();
  if (x === '–≤ —Ä–∞–±–æ—Ç–µ' || x === 'doing' || x === 'progress') return '–í —Ä–∞–±–æ—Ç–µ';
  if (x === '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' || x === 'review') return '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ';
  if (x === '–∑–∞–≤–µ—Ä—à–µ–Ω–∞' || x === '–≥–æ—Ç–æ–≤–æ' || x === '—Å–¥–µ–ª–∞–Ω–æ' || x === 'done' || x === 'complete') return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
  if (x === '–æ—Ç–ª–æ–∂–µ–Ω–∞' || x === 'later' || x === 'deferred') return '–û—Ç–ª–æ–∂–µ–Ω–∞';
  if (x === '–æ—Ç–º–µ–Ω–µ–Ω–∞' || x === 'cancel') return '–û—Ç–º–µ–Ω–µ–Ω–∞';
  if (x === '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è' || x === '–∂–¥—ë–º' || x === '–æ–∂–∏–¥–∞–Ω–∏–µ' || x === '–±–ª–æ–∫' || x === 'blocked') return '–í –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è';
  return '–í —Ä–∞–±–æ—Ç–µ';
}

export class BotApp {
  constructor() {
    this.bot = new TelegramBot(ENV.TELEGRAM_TOKEN, { polling: true });

    const api = new ApiClient();
    this.files = new FileStorage();
    this.openai = new OpenAIService();
    this.assistant = new AssistantService({ bot: this.bot }); // <-- —Ñ–∏–∫—Å
    this.employees = new EmployeesService(api);
    this.notifier = new Notifier(this.bot);
    this.tools = new ToolRouter({ api, employees: this.employees, notifier: this.notifier });
    this.acl = new AccessControlService({ employees: this.employees });
    this.uiState = new Map();
    this.pendingAssign = new Map();

    this.bindHandlers();
    log.info('BotApp initialized');

	    // üïí –ï–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä—É (Asia/Dushanbe)
    process.env.TZ = process.env.TZ || 'Asia/Dushanbe';
    startDirectorHourlyReportScheduler({ api: this.api, toolRouter: this.tools, notifier: this.notifier });
  }

  bindHandlers() {
    this.bot.onText(/^(\/start|\/menu)$/, async (msg) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed) return;

      await this.bot.sendMessage(
        msg.chat.id,
        'üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è —Å–ø—Ä–æ—à—É –ò–ò-–∞–≥–µ–Ω—Ç–∞ –∏/–∏–ª–∏ –≤—ã–ø–æ–ª–Ω—é –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏.\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        TelegramUI.mainMenuInline()
      );
    });

    this.bot.on('callback_query', async (q) => this.onCallbackQuery(q));
    this.bot.on('message', async (msg) => this.onMessage(msg));
  }

  async start() {}
  async stop() {}

  async onCallbackQuery(q) {
    try {
      const auth = await this.acl.authorize(q.from?.id);
      if (!auth.allowed) {
        await this.bot.answerCallbackQuery(q.id, { text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', show_alert: true });
        return;
      }

      const data = q.data || '';

      // –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: task_status|<id>|<status>
      let m = data.match(/^task_status\|(\d+)\|(.+)$/i);
      if (m) {
        const taskId = Number(m[1]);
        const status = normalizeTaskStatus(m[2]);

        const res = await this.tools.route('update_status', { taskId, status }, {
          requesterChatId: String(q.from.id),
          requesterEmployee: auth.employee
        });

        if (res?.ok) {
          try {
            if (q.message?.chat?.id && q.message?.message_id) {
              await this.bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: q.message.chat.id,
                message_id: q.message.message_id
              });
            }
          } catch {}
          await this.bot.answerCallbackQuery(q.id, { text: `–°—Ç–∞—Ç—É—Å: ${status}` });
        } else {
          await this.bot.answerCallbackQuery(q.id, { text: `‚ö†Ô∏è ${res?.error || '–û—à–∏–±–∫–∞'}`, show_alert: true });
        }
        return;
      }

      // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫ (–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Ç.–¥.)

      await this.bot.answerCallbackQuery(q.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
    } catch (e) {
      await this.bot.answerCallbackQuery(q.id, { text: `‚ö†Ô∏è ${e?.message || e}`, show_alert: true });
    }
  }

  async onMessage(msg) {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ –≥–æ–ª–æ—Å ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if (!msg.text && !msg.voice) return;
    if (msg.text && msg.text.startsWith('/')) return;

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const auth = await this.acl.authorize(msg.from?.id);
    if (!auth.allowed) return;

    const chatId = msg.chat.id;

    if (msg.text && !msg.text.startsWith('/')) {
      await this.bot.sendMessage(chatId, '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...');
      const aiReply = await this.assistant.ask(msg.text, { chatId, employee: auth.employee });

      await this.bot.sendMessage(chatId, aiReply);

      try {
        const buf = await this.openai.speak(aiReply);
        const out = await this.files.saveBuffer(buf, 'ogg');
        await this.bot.sendVoice(
          chatId,
          fs.createReadStream(out),
          { filename: 'voice.ogg' }
        );
      } catch {}
      return;
    }

    if (msg.voice) {
      try {
        await this.bot.sendMessage(chatId, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å‚Ä¶');
        const localPath = await this.files.downloadTelegramFile(this.bot, msg.voice.file_id, 'ogg');
        const text = await this.openai.transcribe(localPath);
        await this.bot.sendMessage(chatId, `üìù –†–∞—Å–ø–æ–∑–Ω–∞–ª: ¬´${text}¬ª`);

        await this.bot.sendMessage(chatId, 'üîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑‚Ä¶');
        const aiReply = await this.assistant.ask(text, { chatId, employee: auth.employee });
        await this.bot.sendMessage(chatId, aiReply);

        try {
          const buf = await this.openai.speak(aiReply);
          const out = await this.files.saveBuffer(buf, 'ogg');
          await this.bot.sendVoice(
            chatId,
            fs.createReadStream(out),
            { filename: 'voice.ogg' }
          );
        } catch {}
      } catch (e) {
        log.error('[VOICE ERROR]', e?.message || e);
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      }
    }
  }
}
